def process_file(self):
        """Dosyayı işler - GÜNCELLENEN proje dialog ile!"""
        if not self.current_file_path:
            messagebox.showerror("Hata", "Önce bir dosya seçin!")
            return
        
        try:
            # 1. Word servisini başlat
            word_service = WordReaderService()
            
            # 2. Dosyadan bilgileri çıkar
            try:
                file_info = word_service.extract_file_info(self.current_file_path)
                print(f"Debug - file_info: {file_info}")
                
                # Güvenlik kontrolü
                if not file_info or not isinstance(file_info, dict):
                    print("⚠ file_info None veya dict değil, default değerler kullanılıyor")
                    file_info = {'part_no': 'Unknown', 'operation_no': '00'}
                    
            except Exception as extract_error:
                print(f"⚠ extract_file_info hatası: {extract_error}")
                file_info = {'part_no': 'Unknown', 'operation_no': '00'}
            
            # 3. Proje bilgileri dialog'unu göster
            from ui.project_info_dialog import ProjectInfoDialog
            
            # Dialog'u aç
            dialog = ProjectInfoDialog(
                self, 
                operation_no=file_info.get('operation_no', '00'),
                part_no=file_info.get('part_no', 'Unknown')
            )
            self.wait_window(dialog)
            
            # Dialog sonucunu kontrol et
            if not dialog.result:
                # İptal edildi
                messagebox.showinfo("İptal", "Dosya yükleme işlemi iptal edildi.")
                return
            
            # Proje bilgilerini sakla
            self.project_info = dialog.result
            print(f"✓ Proje bilgileri alındı: {self.project_info}")
            
            # Proje bilgilerini göstergede güncelle
            project_text = f"Proje: {self.project_info['project']} | Seri: {self.project_info['serial_no']}"
            self.project_info_label.configure(text=project_text, text_color="#4fc3f7")
            
            self.file_path_label.configure(text="İşleniyor...")
            self.update()
            
            # 4. Data processor ile DataFrame oluştur (staticmethod çağrısı)
            df = DataProcessorService.from_word_tables(word_service, self.current_file_path)
            
            if df.empty:
                messagebox.showwarning("Uyarı", "Geçerli veri bulunamadı!")
                return
            
            # 5. Model objelerine dönüştür
            data_service = DataProcessorService()
            self.karakterler = data_service.process_dataframe(df)
            
            if not self.karakterler:
                messagebox.showwarning("Uyarı", "Geçerli karakter bulunamadı!")
                return
            
            # 6. Word Save As servisi için orijinal dosyayı yükle
            self.word_save_service.load_original_document(self.current_file_path)
            
            # 7. Dokümanı sağ panelde göster
            self.document_viewer.load_document(self.current_file_path)
            
            # 8. İlk karakteri göster
            self.current_index = 0
            self.show_current_karakter()
            self.update_navigation()
            self.update_stats()
            
            file_name = os.path.basename(self.current_file_path)
            self.file_path_label.configure(text=f"✓ Yüklendi: {file_name}")
            
            # Başarı mesajı - proje bilgileri dahil
            success_msg = f"""✅ Başarıyla yüklendi!

📊 Veri: {len(self.karakterler)} karakter
📋 Proje: {self.project_info['project']}
🏷️ Seri: {self.project_info['serial_no']}
🔧 Part: {self.project_info['part_no']}
⚙️ Operation: {self.project_info['operation_no']}

Ok tuşları ile navigate edebilirsiniz."""
            
            messagebox.showinfo("Başarılı", success_msg)
            
        except Exception as e:
            messagebox.showerror("Hata", f"İşleme hatası:\n{str(e)}")
            print(f"İşleme hatası: {e}")
            import traceback
            traceback.print_exc()
